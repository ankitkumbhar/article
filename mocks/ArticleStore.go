// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	models "article/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// ArticleStore is an autogenerated mock type for the ArticleStore type
type ArticleStore struct {
	mock.Mock
}

type ArticleStore_Expecter struct {
	mock *mock.Mock
}

func (_m *ArticleStore) EXPECT() *ArticleStore_Expecter {
	return &ArticleStore_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields:
func (_m *ArticleStore) GetAll() ([]*models.Article, error) {
	ret := _m.Called()

	var r0 []*models.Article
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*models.Article, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*models.Article); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Article)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArticleStore_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ArticleStore_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *ArticleStore_Expecter) GetAll() *ArticleStore_GetAll_Call {
	return &ArticleStore_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *ArticleStore_GetAll_Call) Run(run func()) *ArticleStore_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ArticleStore_GetAll_Call) Return(_a0 []*models.Article, _a1 error) *ArticleStore_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArticleStore_GetAll_Call) RunAndReturn(run func() ([]*models.Article, error)) *ArticleStore_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: articleID
func (_m *ArticleStore) GetByID(articleID int) (*models.Article, error) {
	ret := _m.Called(articleID)

	var r0 *models.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*models.Article, error)); ok {
		return rf(articleID)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Article); ok {
		r0 = rf(articleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(articleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArticleStore_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ArticleStore_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//  - articleID int
func (_e *ArticleStore_Expecter) GetByID(articleID interface{}) *ArticleStore_GetByID_Call {
	return &ArticleStore_GetByID_Call{Call: _e.mock.On("GetByID", articleID)}
}

func (_c *ArticleStore_GetByID_Call) Run(run func(articleID int)) *ArticleStore_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *ArticleStore_GetByID_Call) Return(_a0 *models.Article, _a1 error) *ArticleStore_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArticleStore_GetByID_Call) RunAndReturn(run func(int) (*models.Article, error)) *ArticleStore_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: article
func (_m *ArticleStore) Store(article *models.Article) (int64, error) {
	ret := _m.Called(article)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Article) (int64, error)); ok {
		return rf(article)
	}
	if rf, ok := ret.Get(0).(func(*models.Article) int64); ok {
		r0 = rf(article)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*models.Article) error); ok {
		r1 = rf(article)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArticleStore_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type ArticleStore_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//  - article *models.Article
func (_e *ArticleStore_Expecter) Store(article interface{}) *ArticleStore_Store_Call {
	return &ArticleStore_Store_Call{Call: _e.mock.On("Store", article)}
}

func (_c *ArticleStore_Store_Call) Run(run func(article *models.Article)) *ArticleStore_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Article))
	})
	return _c
}

func (_c *ArticleStore_Store_Call) Return(_a0 int64, _a1 error) *ArticleStore_Store_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ArticleStore_Store_Call) RunAndReturn(run func(*models.Article) (int64, error)) *ArticleStore_Store_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewArticleStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewArticleStore creates a new instance of ArticleStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewArticleStore(t mockConstructorTestingTNewArticleStore) *ArticleStore {
	mock := &ArticleStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
